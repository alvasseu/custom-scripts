
import re
import pprint
import glob
import collections

file = 'C:/transfert/showiproute.txt'

f = open(file, 'r')

entry_start = 0

big_routing_db1 = {}
big_routing_db2 = {}
routing_table = {}
routing_entry = []
interface_list = []

protocol = 'no protocol'


def Summary(line):
    ###Subnet summary, mask determination
    if re.findall(r'[0-9]+(?:\.[0-9]+){3}/', line) and 'subnet' in line:
        entry_start = 1
        words = line.split()
        #print words
        for word in words:
            if re.findall(r'[0-9]+(?:\.[0-9]+){3}/', word):
                mask = word.split('/')[1]
                #print mask
        #nbr_of_prefix =  words[4]
        #print nbr_of_prefix
        summary_active = 1
        return summary_active, mask

def Prefix_nomask(line, mask):
    if re.findall(r'  [0-9]+(?:\.[0-9]+){3}', line):
        words = line.split()
        #print words
        for word in words:
            if re.findall(r'[0-9]+(?:\.[0-9]+){3}$', word):
                new_subnet = ('%s/%s' % (word, mask))
                #print new_subnet
                return new_subnet

def Prefix(line):
    ###identify prefix
    if re.findall(r'[0-9]+(?:\.[0-9]+){3}/', line) and Protocol(line):
        entry_start = 1
        words = line.split()
        #print words
        for word in words:
            if re.findall(r'[0-9]+(?:\.[0-9]+){3}/', word):
                new_subnet = word
                #print new_subnet
        summary_active = 0
        return summary_active, new_subnet

def Nexthop(line):
    if 'via' in line:
        words = line.split()
        #print words
        for word in words:
            if re.findall(r'[0-9]+(?:\.[0-9]+){3},', word):
                nexthop = word.replace(',','')
                #print nexthop
                return nexthop

def Interface(line):
    if 'via' in line or 'directly connected' in line:
        words = line.split()
        #print words
        for word in words:
            if re.findall(r'Ethernet', word) or re.findall(r'Null', word):
                interface = word
                #print interface
                return interface



def AD_metric(line):
    if 'via' in line:
        words = line.split()
        #print words
        for word in words:
            if re.findall(r'\[[0-9]*\/[0-9]*\]', word):
                raw1 = word.replace('[','').replace(']','')
                raw = raw1.split('/')
                ad = raw[0]
                metric = raw[1]
                #print ad
                #print metric
                return ad, metric
    if 'directly connected' in line:
        ad = "0"
        metric = "1"
        return ad, metric


def Protocol(line):
    if line.startswith('B '):
        protocol = 'BGP'
    elif line.startswith('D  '):
        protocol = 'EIGRP'
    elif line.startswith('D EX'):
        protocol = 'EIGRP External'
    elif line.startswith('S '):
        protocol = 'Static'
    elif line.startswith('C '):
        protocol = 'Connected'
    elif line.startswith('R '):
        protocol = 'RIP'
    elif line.startswith('O  '):
        protocol = 'OSPF intra area'
    elif line.startswith('O IA'):
        protocol = 'OSPF inter area'
    elif line.startswith('O N1'):
        protocol = 'OSPF NSSA external type 1'
    elif line.startswith('O N2'):
        protocol = 'OSPF NSSA external type 2'
    elif line.startswith('O E1'):
        protocol = 'OSPF external type 1'
    elif line.startswith('O E2'):
        protocol = 'OSPF external type 2'
    elif re.findall(r'[A-Z]\*', line):
        protocol = 'Default route'
    else:
        protocol = None
    return protocol


def Nxos_prefix(line):
    if re.findall(r'[0-9]+(?:\.[0-9]+){3}/', line):
        words = line.split()
        for word in words:
            if re.findall(r'[0-9]+(?:\.[0-9]+){3}/', word):
                new_subnet = word
        return new_subnet


def Nxos_Protocol(line):
    if 'bgp-' in line:
        protocol = 'BGP'
    elif 'eigrp-' in line and 'internal' in line:
        protocol = 'EIGRP'
    elif 'eigrp-' in line and 'external' in line:
        protocol = 'EIGRP External'
    elif 'static' in line:
        protocol = 'Static'
    elif 'local' in line:
        protocol = 'Local'
    elif 'direct' in line:
        protocol = 'Direct'
    elif 'hsrp' in line:
        protocol = 'HSRP'
    elif 'am' in line:
        protocol = 'Adjacency Manager'
    elif 'ospf-' in line and 'intra' in line:
        protocol = 'OSPF intra area'
    elif 'ospf-' in line and 'inter' in line:
        protocol = 'OSPF inter area'
    elif 'ospf-' in line and 'type-1' in line:
        protocol = 'OSPF external type 1'
    elif 'ospf-' in line and 'type-2' in line:
        protocol = 'OSPF external type 2'
    elif 'ospf-' in line and 'nssa type-1' in line:
        protocol = 'OSPF NSSA external type 1'
    elif 'ospf-' in line and 'nssa type-2' in line:
        protocol = 'OSPF NSSA external type 2'
    elif 'rip-' in line:
        protocol = 'RIP'
    else:
        protocol = 'Unknown Protocol'
    return protocol


def Arista_prefix(line):
    if re.findall(r'[0-9]+(?:\.[0-9]+){3}/', line):
        words = line.split()
        for word in words:
            if re.findall(r'[0-9]+(?:\.[0-9]+){3}/', word):
                new_subnet = word
        return new_subnet

def Arista_Protocol(line):
    if line.startswith(' B I '):
        protocol = 'BGP internal'
    elif line.startswith(' B E '):
        protocol = 'BGP external'
    elif line.startswith(' S '):
        protocol = 'Static'
    elif line.startswith(' C '):
        protocol = 'Connected'
    elif line.startswith(' R '):
        protocol = 'RIP'
    elif line.startswith(' O  '):
        protocol = 'OSPF intra area'
    elif line.startswith(' O IA'):
        protocol = 'OSPF inter area'
    elif line.startswith(' O N1'):
        protocol = 'OSPF NSSA external type 1'
    elif line.startswith(' O N2'):
        protocol = 'OSPF NSSA external type 2'
    elif line.startswith(' O E1'):
        protocol = 'OSPF external type 1'
    elif line.startswith(' O E2'):
        protocol = 'OSPF external type 2'
    elif re.findall(r'[A-Z]\*', line):
        protocol = 'Default route'
    else:
        protocol = None
    return protocol

path = 'C:/transfert/20170223/shiproute/*'
files = glob.glob(path)
for file in files:
    file_name = file.split('\\')[1]
    device_name = file_name.split('.')[0].upper()

    summary_active = 0
    new_subnet = None
    previous_subnet = None
    prefix_attributes = []
    entry_start = 0

    routing_table = {}
    routing_entry = []
    interface_list = []

    protocol = 'no protocol'

    i = 0

    IOS = False
    NXOS = False
    ARISTA = False

    f = open(file,'r')

    print '--------------------------------'
    print '--------------------------------'
    print device_name

    for line in f:

        #####We identify IOS device based on the beginning of the show ip route
        if line.startswith("Codes: L - local, C - connected, S - static,") or line.startswith("Codes: C - connected, S - static,"):
            IOS = True
            ARISTA = False
            NXOS = False
            print 'IOS'

        #####We identify Arista device based on the beginning of the show ip route
        if line.startswith("Codes: C - connected, S - static, K - kernel,"):
            ARISTA = True
            IOS = False
            NXOS = False
            print 'ARISTA'

        #####We identify NXOS device based on the beginning of the show ip route
        if line.startswith("'*' denotes best ucast next-hop"):
            NXOS = True
            IOS = False
            ARISTA = False
            print 'NXOS'

        #####FOR IOS DEVICE
        if IOS == True:
            if Summary(line):
                summary_active, mask = Summary(line)

            if summary_active == 1 and Prefix_nomask(line, mask) and Protocol(line):
                new_subnet = Prefix_nomask(line, mask)

            if Prefix(line) and Protocol(line):
                summary_active = 0
                summary_active, new_subnet = Prefix(line)
                i = i + 1
                #print new_subnet

            if previous_subnet != new_subnet:
                prefix_attributes = []
                #print '%s  :  %s'%(new_subnet,previous_subnet)

            if Protocol(line):
                protocol = Protocol(line)
                prefix_attributes.append(protocol)
                #print protocol

            if AD_metric(line):
                ad, metric = AD_metric(line)
                prefix_attributes.append(ad)
                prefix_attributes.append(metric)

            if Interface(line):
                interface = Interface(line)
                prefix_attributes.append(interface)

            if Nexthop(line):
                nexthop = Nexthop(line)
                prefix_attributes.append(nexthop)
            ####remettre dans Nexthop si probleme

            if new_subnet != None:
                routing_table[new_subnet]= prefix_attributes

                previous_subnet = new_subnet


        #####FOR ARISTA DEVICE
        if ARISTA == True:
            if Arista_prefix(line):
                new_subnet = Arista_prefix(line)
                #print new_subnet

            if previous_subnet != new_subnet:
                prefix_attributes = []
                #print '%s  :  %s'%(new_subnet,previous_subnet)


            if Arista_Protocol(line):
                protocol = Arista_Protocol(line)
                prefix_attributes.append(protocol)
                #print protocol

            if AD_metric(line):
                ad, metric = AD_metric(line)
                prefix_attributes.append(ad)
                prefix_attributes.append(metric)
                #print ad,metric

            if Interface(line):
                interface = Interface(line)
                prefix_attributes.append(interface)

            if Nexthop(line):
                nexthop = Nexthop(line)
                prefix_attributes.append(nexthop)
                #print nexthop
            ####remettre dans Nexthop si probleme

            if new_subnet != None:
                routing_table[new_subnet]= prefix_attributes

                #print prefix_attributes

                previous_subnet = new_subnet



        if NXOS == True:
            if Nxos_prefix(line):
                new_subnet = Nxos_prefix(line)
                #print new_subnet

            if previous_subnet != new_subnet:
                prefix_attributes = []
                #print '%s  :  %s'%(new_subnet,previous_subnet)

            if AD_metric(line):
                ad, metric = AD_metric(line)
                prefix_attributes.append(ad)
                prefix_attributes.append(metric)

            if Nexthop(line):
                nexthop = Nexthop(line)
                prefix_attributes.append(nexthop)

            if Nxos_Protocol(line):
                protocol = Nxos_Protocol(line)
                prefix_attributes.append(protocol)
                #print protocol

            if new_subnet != None:
                routing_table[new_subnet] = prefix_attributes

                previous_subnet = new_subnet


    #pprint.pprint(routing_table)
    #print routing_table

    print len(routing_table)

    nbr_D_ext = 0
    nbr_D = 0
    nbr_O = 0
    nbr_O_ext = 0
    nbr_R = 0
    nbr_S = 0
    nbr_C = 0
    nbr_B = 0
    nbr_prefix = 0



    for x in routing_table:
        #print x
        nbr_prefix = nbr_prefix + 1
        #print routing_table[x]
        for y in routing_table[x]:
            #print y
            if 'Static' in y:
                nbr_S = nbr_S + 1
                #print x
            elif 'Connected' in y or 'Direct' in y:
                nbr_C = nbr_C + 1
            elif 'EIGRP External' in y:
                nbr_D_ext = nbr_D_ext + 1
            elif 'EIGRP' in y:
                nbr_D += 1
            elif 'OSPF external' in y or 'OSPF NSSA' in y:
                nbr_O_ext += 1
            elif 'OSPF' in y:
                nbr_O += 1
            elif 'RIP' in y:
                nbr_R += 1
            elif 'BGP' in y:
                nbr_B += 1


    print 'Number of Connected prefix: %i'%nbr_C
    print 'Number of Static prefix: %i'%nbr_S
    print 'Number of EIGRP prefix: %i'%nbr_D
    print 'Number of EIGRP External prefix: %i'%nbr_D_ext
    print 'Number of OSPF prefix: %i'%nbr_O
    print 'Number of OSPF external prefix: %i'%nbr_O_ext
    print 'Number of RIP prefix: %i'%nbr_R
    print 'Number of BGP prefix: %i'%nbr_B



    big_routing_db1[device_name]=collections.OrderedDict(sorted(routing_table.items()))

    #big_routing_db1[device_name]=routing_table




################# Compare to another sh ip route
path1 = 'C:/transfert/20170226/shiproute/*'
files1 = glob.glob(path1)
for file1 in files1:
    file1_name = file1.split('\\')[1]
    device1_name = file1_name.split('.')[0].upper()

    summary_active = 0
    new_subnet = None
    previous_subnet = None
    prefix_attributes = []
    entry_start = 0

    routing_table1 = {}
    routing_entry = []
    interface_list = []

    protocol = 'no protocol'

    i = 0

    IOS = False
    NXOS = False
    ARISTA = False

    f1 = open(file1,'r')

    print '--------------------------------'
    print '--------------------------------'
    print device1_name

    for line in f1:

        #####We identify IOS device based on the beginning of the show ip route
        if line.startswith("Codes: L - local, C - connected, S - static,") or line.startswith("Codes: C - connected, S - static,"):
            IOS = True
            ARISTA = False
            NXOS = False
            print 'IOS'

        #####We identify Arista device based on the beginning of the show ip route
        if line.startswith("Codes: C - connected, S - static, K - kernel,"):
            ARISTA = True
            IOS = False
            NXOS = False
            print 'ARISTA'

        #####We identify NXOS device based on the beginning of the show ip route
        if line.startswith("'*' denotes best ucast next-hop"):
            NXOS = True
            IOS = False
            ARISTA = False
            print 'NXOS'

        #####FOR IOS DEVICE
        if IOS == True:
            if Summary(line):
                summary_active, mask = Summary(line)

            if summary_active == 1 and Prefix_nomask(line, mask) and Protocol(line):
                new_subnet = Prefix_nomask(line, mask)

            if Prefix(line) and Protocol(line):
                summary_active = 0
                summary_active, new_subnet = Prefix(line)
                i = i + 1
                #print new_subnet

            if previous_subnet != new_subnet:
                prefix_attributes = []
                #print '%s  :  %s'%(new_subnet,previous_subnet)

            if Protocol(line):
                protocol = Protocol(line)
                prefix_attributes.append(protocol)
                #print protocol

            if AD_metric(line):
                ad, metric = AD_metric(line)
                prefix_attributes.append(ad)
                prefix_attributes.append(metric)

            if Interface(line):
                interface = Interface(line)
                prefix_attributes.append(interface)

            if Nexthop(line):
                nexthop = Nexthop(line)
                prefix_attributes.append(nexthop)
            ####remettre dans Nexthop si probleme
            if new_subnet != None:
                routing_table1[new_subnet]= prefix_attributes

                previous_subnet = new_subnet


        #####FOR ARISTA DEVICE
        if ARISTA == True: 
            if Arista_prefix(line):
                new_subnet = Nxos_prefix(line)
                #print new_subnet

            if previous_subnet != new_subnet:
                prefix_attributes = []
                #print '%s  :  %s'%(new_subnet,previous_subnet)

            if Arista_Protocol(line):
                protocol = Arista_Protocol(line)
                prefix_attributes.append(protocol)
                #print protocol

            if AD_metric(line):
                ad, metric = AD_metric(line)
                prefix_attributes.append(ad)
                prefix_attributes.append(metric)

            if Interface(line):
                interface = Interface(line)
                prefix_attributes.append(interface)

            if Nexthop(line):
                nexthop = Nexthop(line)
                prefix_attributes.append(nexthop)
            ####remettre dans Nexthop si probleme
            if new_subnet != None:
                routing_table1[new_subnet]= prefix_attributes
                #print routing_table1
                previous_subnet = new_subnet



        if NXOS == True:
            if Nxos_prefix(line):
                new_subnet = Nxos_prefix(line)
                #print new_subnet

            if previous_subnet != new_subnet:
                prefix_attributes = []
                #print '%s  :  %s'%(new_subnet,previous_subnet)

            if AD_metric(line):
                ad, metric = AD_metric(line)
                prefix_attributes.append(ad)
                prefix_attributes.append(metric)

            if Nexthop(line):
                nexthop = Nexthop(line)
                prefix_attributes.append(nexthop)

            if Nxos_Protocol(line):
                protocol = Nxos_Protocol(line)
                prefix_attributes.append(protocol)
                #print protocol
            if new_subnet != None:
                routing_table1[new_subnet] = prefix_attributes

                previous_subnet = new_subnet


    #pprint.pprint(routing_table1)

    print len(routing_table1)

    collections.OrderedDict(sorted(routing_table1.items()))

    big_routing_db2[device1_name]=collections.OrderedDict(sorted(routing_table1.items()))



for db1_values, db2_values in zip(big_routing_db1.iteritems(), big_routing_db2.iteritems()):
        if db1_values != db2_values:

            #### Device name
            print '================='
            print db1_values[0]
            #print db1_values
            #print db2_values
            #print big_routing_db1[db1_values[0]]

            ####The first loop permit to check what has been removed from the first reference file
            for prefix_key1 , prefix_value1 in big_routing_db1[db1_values[0]].items():
                #print prefix_key1
                #print prefix_value1
                #### We agree that if the prefix is not existing in the other file it's because it has been deleted
                prefix_missing = 1
                for prefix_key2, prefix_value2 in big_routing_db2[db1_values[0]].items():
                    #### If the prefix exist in both file, we look in details
                    if prefix_key1 == prefix_key2:
                        prefix_missing = 0
                        if prefix_value1 != prefix_value2:
                            #print prefix_value1
                            #print prefix_value2
                            print "Prefix %s attributes changed"%prefix_key1
                            if prefix_value1[0] != prefix_value2[0]:
                                print('Protocol is now : %s (was %s)'%(prefix_value1[0],prefix_value2[0]))
                            if prefix_value1[1] != prefix_value2[1]:
                                print('Administrative Distance is now : %s (was %s)'%(prefix_value1[1],prefix_value2[1]))
                            if prefix_value1[2] != prefix_value2[2]:
                                print('Metric is now : %s (was %s)'%(prefix_value1[2],prefix_value2[2]))
                            #### if we have 3 attributes and they are different
                            if re.findall(r'[0-9]+(?:\.[0-9]+){3}', ' '.join(prefix_value1)) and re.findall(r'[0-9]+(?:\.[0-9]+){3}', ' '.join(prefix_value2)):
                                    if prefix_value1[3] != prefix_value2[3]:
                                        print('Next-Hop is now : %s (was %s)'%(prefix_value1[3],prefix_value2[3]))

                            #print "Before"
                            print prefix_value1
                            #print "Now"
                            print prefix_value2
                if prefix_missing == 1:
                    print "Prefix %s is missing from the new database"%prefix_key1
                    pass

            for prefix_key2, prefix_value2 in big_routing_db2[db1_values[0]].items():
                prefix_added = 1
                for prefix_key1, prefix_value1 in big_routing_db1[db1_values[0]].items():
                    if prefix_key2 == prefix_key1:
                        prefix_added = 0
                if prefix_added == 1:
                    print "Prefix %s has been added" % prefix_key2
